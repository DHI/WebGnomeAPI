"""
    Setup file.
"""
import os
import shutil
import fnmatch
import htmlmin
import ujson
import re

from setuptools import setup, find_packages
from distutils.command.clean import clean
from distutils.command.build import build as base_build

# could run setup from anywhere
here = os.path.abspath(os.path.dirname(__file__))

with open(os.path.join(here, 'README.rst')) as f:
    README = f.read()


class cleandev(clean):
    description = 'cleans files generated by develop mode'

    def run(self):
        # call base class clean
        clean.run(self)

        # clean auto-generated files
        paths = [os.path.join(here, 'webgnome_api'),
                 ]
        file_patterns = ['*.pyc']

        for path in paths:
            for pattern in file_patterns:
                file_list = [os.path.join(dirpath, f)
                             for dirpath, dirnames, files in os.walk(path)
                             for f in fnmatch.filter(files, pattern)]

                for f in file_list:
                    try:
                        os.remove(f)
                        print "Deleted auto-generated file: {0}".format(f)
                    except OSError as err:
                        print ("Failed to remove {0}. Error: {1}"
                               .format(f, err))

        rm_dir = ['webgnome_api.egg-info']
        for dir_ in rm_dir:
            try:
                shutil.rmtree(dir_)
                print "Deleted auto-generated directory: {0}".format(dir_)
            except OSError as err:
                if err.errno != 2:
                    # we report everything except file not found.
                    print ("Failed to remove {0}. Error: {1}"
                           .format(dir_, err))


class buildlocations(base_build):
    description = ''

    def run(self):
        base_build.run(self)

        paths = [os.path.join(here, 'location_files')]
        file_patterns = ['*wizard.json']

        for path in paths:
            for pattern in file_patterns:
                file_list = [os.path.join(dirpath, f)
                             for dirpath, dirnames, files in os.walk(path)
                             for f in fnmatch.filter(files, pattern)]

                for f in file_list:
                    try:
                        self.parse(self, f)
                    except OSError as err:
                        print ("Failed to find {0}. Error {1}".format(f, err))

    def parse(self, obj, path):
        exttype = os.path.splitext(path)[1]
        with open(path, "r") as wizard_json:
            data = unicode(wizard_json.read(), "utf-8")
            data_obj = ujson.loads(data)
            for key in data_obj:
                if key == "steps":
                    for step in data_obj[key]:
                        if step["type"] == "custom":
                            self.fill_html_body(self, data_obj, path)
        # if exttype == ".html":
        #     min_html = self.htmlMinify(path)
        #     #print f
        # elif exttype == ".js":
        #     print "javascript file found"
        # elif exttype == ".json":
        #     print path


    def fill_html_body(self, obj, path):
        pass

    def htmlMinify(self, path):
        with open(path, "r") as myfile:
            data = unicode(myfile.read(), "utf-8")
            return htmlmin.minify(data)

    #def compile_to_JSON(self, content, ext)

setup(name='webgnome_api',
      version=0.1,
      description='webgnome_api',
      long_description=README,
      classifiers=["Programming Language :: Python",
                   "Framework :: Pylons",
                   "Topic :: Internet :: WWW/HTTP",
                   "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
                   ],
      keywords="adios gnome oilspill weathering trajectory modeling",
      author='ADIOS/GNOME team at NOAA ORR',
      author_email='orr.gnome@noaa.gov',
      url='',
      cmdclass={'cleandev': cleandev,
                'buildlocations': buildlocations
                },
      packages=find_packages(),
      include_package_data=True,
      zip_safe=False,
      test_suite='webgnome_api',
      entry_points=('[paste.app_factory]\n'
                    '  main = webgnome_api:main\n'),
)
